<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript（八）表单处理事件]]></title>
    <url>%2F2018%2F01%2F20%2Fjavascript%EF%BC%88%E5%85%AB%EF%BC%89%E8%A1%A8%E5%8D%95%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[javascript表单单选框 1 .javascript表单单选框 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" type="text/css" href="CSS/feifei.css"&gt; &lt;script type="text/javascript"&gt; function showSex() &#123; var sex = document.all("sex"); if(sex[0].checked) &#123; alert("性别是：" +sex[0].value); &#125; if(sex[1].checked) &#123; alert("性别是:" + sex[1].value); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; 请选择性别：&lt;input type="radio" name="sex" id="sex" value="男" checked&gt; 男&amp;nbsp; &lt;input type="radio" name="sex" id="sex" value="女"&gt;女&lt;br&gt; &lt;button onclick="showSex()"&gt;显示性别&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 2 .javascript表单复选框 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;实验课&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function showInst() &#123; var inst = document.all("inst"); var str = "小狗的兴趣：" ; for(var x=0;x&lt;inst.length;x++) &#123; if(inst[x].checked) &#123; str += inst[x].value + "、" ; &#125; &#125; alert(str); &#125; function selectAll() &#123; var inst = document.all("inst"); for(var x=0; x&lt;inst.length; x++) &#123; inst[x].checked = document.getElementById("sela").checked; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; 你的兴趣爱好：&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="上网"&gt;上网&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="打游戏"&gt;打游戏&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="唱歌"&gt;唱歌&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="画画"&gt;画画&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="打篮球"&gt;打篮球&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="打排球"&gt;打排球&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="旅行"&gt;旅行&lt;br&gt; &lt;input type="checkbox" name="inst" id="inst" value="吃吃吃"&gt;吃吃吃&lt;br&gt;&lt;br&gt; &lt;input type="checkbox" id="sela" name="sela" onclick="selectAll()"&gt;全选 &lt;button onclick="showInst()"&gt;显示&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 3 .javascript表单下拉列表框下拉列表框如果要进行表单交互使用的事件是onchange事件。表示下拉内容发生改变。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;实验课&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function showCity(city) &#123; alert("家乡是：" + city); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; 你的家乡：&lt;select name="city" id="city" onchange="showCity(this.value)"&gt; &lt;option value="北京-BJ"&gt;北京&lt;/option&gt; &lt;option value="上海-SH"&gt;上海&lt;/option&gt; &lt;option value="沈阳-SY"&gt;沈阳&lt;/option&gt; &lt;/select&gt; &lt;/body&gt;&lt;/html&gt; 4 .javascript文本域： 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;实验课&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function validateNote() &#123; var note = document.getElementById("note"); var msg = document.getElementById("noteMsg"); var len = note.value.length; if(len &lt;= 10) &#123; msg.innerHTML = "还可以输入" +(10 - len) + "个长度的数据"; document.getElementById("sub").disabled = "" ; &#125; else &#123; msg.innerHTML = "&lt;font color='red'&gt;输入的数据内容过大，不符合&lt;/font&gt;"; document.getElementById("sub").disabled = "disabled" ; &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form action="show.html" method="post"&gt; 描述：&lt;textarea id="note" name="note" cols="50" rows="10" onkeypress="validateNote()" onkeydown="validateNote()"&gt;hello&lt;/textarea&gt;&lt;br&gt; &lt;span id="noteMsg"&gt;&lt;/span&gt;&lt;br&gt; &lt;button type="submit" name="sub" id="sub"&gt;保存&lt;/button&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（七）表单密码验证]]></title>
    <url>%2F2018%2F01%2F20%2Fjavascript%EF%BC%88%E4%B8%83%EF%BC%89%E8%A1%A8%E5%8D%95%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[javascript表单密码验证 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" type="text/css" href="CSS/feifei.css"&gt; &lt;script type="text/javascript" src="js/demo.js"&gt; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; 输入密码： &lt;input type="password" name="pwd" id="pwd" class="init"&gt;&lt;span id="pwdMsg"&gt;&lt;/span&gt;&lt;br&gt; 确认密码： &lt;input type="password" name="conf" id="conf" class="init"&gt;&lt;span id="confMsg"&gt;&lt;/span&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt; js/demo.js：12345678910111213141516171819202122232425262728293031323334353637383940function validateEmpty(elementName) &#123; var objElement = document.getElementById(elementName); var msgElement = document.getElementById(elementName + "Msg"); if(objElement.value != "") &#123; objElement.className = "right" ; msgElement.innerHTML = "&lt;font color='green'&gt;输入的内容正确&lt;/font&gt;" ; return true; &#125; else &#123; objElement.className = "wrong" ; msgElement.innerHTML = "&lt;font color='red'&gt;输入的内容错误&lt;/font&gt;" ; return false; &#125;&#125;function validateRepeat(srcName,desName) &#123; var srcElement = document.getElementById(srcName); var desElement = document.getElementById(desName); var msgElement = document.getElementById(desName + "Msg"); if(srcElement.value == desElement.value) &#123; desElement.className = "right" ; msgElement.innerHTML = "&lt;font color='green'&gt;输入的内容正确&lt;/font&gt;" ; return true; &#125; else &#123; desElement.className = "wrong" ; msgElement.innerHTML = "&lt;font color='red'&gt;输入的内容错误&lt;/font&gt;" ; return false; &#125;&#125;function validatePwd() &#123; return validateEmpty("pwd");&#125;function validateConf() &#123; if(validateEmpty("conf")) &#123; return validateRepeat("pwd","conf"); &#125; return false;&#125;window.onload = function() &#123; document.getElementById("pwd").addEventListener("blur",validatePwd,false); document.getElementById("conf").addEventListener("blur",validateConf,false);&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（六）表单验证]]></title>
    <url>%2F2018%2F01%2F19%2Fjavascript%EF%BC%88%E5%85%AD%EF%BC%89%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[前言:表单数据的取得以及验证是在整个javascript里面使用最重要的一个场景 1 . 所有的javascript中事件一定要与函数捆绑在一起使用，因此就利用这些事件来进行表单元素的操作。Demo：取得输入的文本信息注：在表单控件里面name和id的内容一定要保持一致。 12345678910111213141516&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function showEmail() &#123; //定义事件的处理函数 var emailElement = document.getElementById("email"); alert("EMAIL = " + emailElement.value); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt;请输入email地址：&lt;input type="text" name="email" id="email" value=""&gt;&lt;/form&gt; &lt;button onclick="showEmail()"&gt;显示内容&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 2 . 在取得了输入的内容之后，更多的是希望进行数据的验证，因为只有合法的email才应该进行正常的显示。要想使用数据验证，正则表达式是最方便的，而javascript也支持。一定要定义正则的开始与结束标记，而且所有的正则符号不在需要转义。语法： “/^正则$/.test（要检测的数据）”Demo1:1234567891011121314151617181920212223&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function showEmail() &#123; //定义事件处理函数 var emailElement = document.getElementById("email"); if(/^\w+@\w+\.\w+$/.test(emailElement.value)) &#123; alert("输入的数据合法"); &#125; else &#123; alert("输入的数据不合法"); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; 请输入email地址：&lt;input type="text" name="email" id="email" value=""&gt; &lt;button onclick="showEmail()"&gt;显示内容&lt;/button&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; Demo2: 1234567891011121314151617181920212223&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function showEmail() &#123; //定义事件处理函数 var emailElement = document.getElementById("email"); if(/^\w+@\w+\.\w+$/.test(emailElement.value)) &#123; alert("输入的数据合法"); &#125; else &#123; alert("输入的数据不合法"); &#125; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form id="myform" action="show.html" method="post"&gt; 请输入email地址：&lt;input type="text" name="email" id="email" value=""&gt; &lt;button type="submit" onclick="showEmail()"&gt;显示内容&lt;/button&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; show.html:&lt;h1&gt;数据验证成功，表单正常提交&lt;/h1&gt; 运行后的结果是：输入的数据合法或不合法 都可以提交表单。3 .一个正常的表单验证操作过程之中，其基本流程： 由用户输入表单内容，如果输入的数据合法，则允许提交；如果不合法则不允许提交。 针对表单验证进行拦截，必须使用onsubmit事件。这个事件是在&lt;form&gt;元素上定义的，表示进行表单提交时触发。 如果需要对表单进行拦截，那么就在onsubmit处理函数上返回false，如果正常执行返回true 。 Demo1:1234567891011121314151617181920212223242526&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function validateEmail() &#123; //定义事件处理函数 var emailElement = document.getElementById("email"); if(/^\w+@\w+\.\w+$/.test(emailElement.value)) &#123; alert("输入的数据合法"); return true; &#125; else &#123; alert("输入的数据不合法"); return false; &#125; &#125; function validate() &#123; return validateEmail(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form id="myform" action="show.html" method="post" onsubmit="return validate()"&gt; 请输入email地址：&lt;input type="text" name="email" id="email" value=""&gt; &lt;button type="submit" onclick="showEmail()"&gt;显示内容&lt;/button&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 运行结果正常，表单正常提交。但是总有万恶的弹框，接下来，改进Demo，在每一个表单初始状态时使用 &quot;.init&quot;样式完成，而如果验证失败使用&quot;.wrong&quot;样式完成，反之使用&quot;.right&quot;样式完成。Demo2: 12345678910111213141516171819202122232425262728&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" type="text/css" href="CSS/feifei.css"&gt; &lt;script type="text/javascript"&gt; function validateEmail() &#123; //定义事件处理函数 var emailElement = document.getElementById("email"); if(/^\w+@\w+\.\w+$/.test(emailElement.value)) &#123; emailElement.className = "right"; return true; &#125; else &#123; emailElement.className = "wrong"; return false; &#125; &#125; function validate() &#123; return validateEmail(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form id="myform" action="show.html" method="post" onsubmit="return validate()"&gt; 请输入email地址：&lt;input type="text" name="email" id="email" value="" class="init"&gt;&lt;br&gt; &lt;button type="submit"&gt;显示内容&lt;/button&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617.init &#123; background: #F5F5F5; font-weight: bold; color: #000000;&#125;.wrong &#123; background: #F5F5F5; font-weight: bold; border: 1px #FF0000 solid; color: #000000;&#125;.right &#123; background: #F5F5F5; font-weight: bold; border: 1px #00FF00 solid; color: #000000;&#125; 最好的验证方式是在文本框失去焦点之后进行验证。获得焦点的事件是：onfocus失去焦点的事件是：onblurDemo3： 12345678910111213141516171819202122232425262728293031&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;link rel="stylesheet" type="text/css" href="CSS/feifei.css"&gt; &lt;script type="text/javascript"&gt; function validateEmail() &#123; //定义事件处理函数 var emailElement = document.getElementById("email"); var msgElement = document.getElementById("emailMsg"); if(/^\w+@\w+\.\w+$/.test(emailElement.value)) &#123; emailElement.className = "right"; msgElement.innerHTML = "email输入正确"; return true; &#125; else &#123; emailElement.className = "wrong"; msgElement.innerHTML = "email输入错误"; return false; &#125; &#125; function validate() &#123; return validateEmail(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;form id="myform" action="show.html" method="post" onsubmit="return validate()"&gt; 请输入email地址：&lt;input type="text" name="email" id="email" value="" class="init" onblur="validateEmail()"&gt;&lt;span id="emailMsg"&gt;&lt;/span&gt;&lt;br&gt; &lt;button type="submit"&gt;显示内容&lt;/button&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 另外改进：Demo4：提示的字体颜色msgElement.innerHTML = &quot;&lt;font color=&#39;green&#39;&gt; email输入正确 &lt;/font&gt;&quot;;msgElement.innerHTML = &quot;&lt;font color=&#39;red&#39;&gt; email输入错误 &lt;/font&gt;&quot;;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（五）动态绑定事件]]></title>
    <url>%2F2018%2F01%2F19%2Fjavascript%EF%BC%88%E4%BA%94%EF%BC%89%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[javascript动态绑定事件1 . 首先看如下Demo： 123456789&lt;script type="text/javascript"&gt; function handle() &#123; //修改当前行元素 alert("事件绑定！"); &#125; //表示是在页面加载的时候进行加载事件的处理 window.onload = function() &#123; //匿名函数 handle(); &#125;&lt;/script&gt; 2 . 使用addEventListener（事件类型，处理函数名称，触发时机）进行动态设置。 注：对于整个javascript事件的处理分为两个部分： 1）事件的冒泡过程 2）事件的触发过程 触发时机都为false，表示在事件的触发过程进行处理，阻止事件的冒泡。 所有的动态设置的事件都可以在onload里面进行动态的配置，但是如果配置必须能够取得一个明确的元素对象可以使用“document.getElementById（元素ID）”的操作方式取得元素对象。Demo1：123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function handle() &#123; //修改当前行元素 alert("事件绑定！"); &#125; //表示是在页面加载的时候进行加载事件的处理 window.onload = function() &#123; //匿名函数 var imgElement = document.getElementById("myimg"); imgElement.addEventListener("click",handle,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- id是整个javascript的操作核心所在，必须存在 --&gt; &lt;img id="myimg" src="52.jpeg" height="20%" width="20%"&gt;&lt;/body&gt;&lt;/html&gt; 注：以后会通常使用这种代码，这种代码格式的好处：HTML和Javascript不会混合。Demo2： 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; window.onload = function() &#123; var butElement = document.getElementById("setBut"); //取得了setBut元素的对象 butElement.addEventListener("click",function() &#123; //在此元素内容增加指定的内容，而且内容可以是HTML代码 document.getElementById("info").innerHTML = "&lt;img src= '52.jpeg' height='40%' width='20%'&gt;"; &#125;,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt;&lt;/span&gt; &lt;button id="setBut"&gt;设置显示图片&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 3 .下面为一个小功能的扩充，实现一个图片浏览器。 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var imgName = new Array("pica.jpg","picb.jpg","picc.jpg","picd.jpg","pice.jpg","picf.jpg"); var foot = 1; window.onload = function() &#123; var pbut = document.getElementById("previousButton"); var nbut = document.getElementById("nextButton"); var img = document.getElementById("img"); nbut.addEventListener("click",function() &#123; if(foot &gt;= imgName.length) &#123; foot = 0; &#125; img.src = "images/" + imgName[foot++]; &#125;,false); pbut.addEventListener("click",function() &#123; if(foot &lt;= imgName.length) &#123; foot = imgName.length-1; &#125; img.src = "images/" + imgName[foot--]; &#125;,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt; &lt;img id="img" src="images/pica.jpg" height="50%"&gt; &lt;/span&gt; &lt;div id="controlDiv"&gt; &lt;button id="previousButton"&gt;上一张&lt;/button&gt; &lt;button id="nextButton"&gt;下一张&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4 . 在javascript中提供一个setTimout（函数，时间-毫秒）利用此函数可以实现定期的操作调用。如下Demo1： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt;hello&lt;/span&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; function setClick() &#123; var date = new Date(); //取当前时间 var info = document.getElementById("info"); info.innerHTML = "当前时间" + date ; setTimeout(setClick,1000); //每秒更新一次 &#125; setClick();&lt;/script&gt;&lt;/html&gt; Demo2：图片定时浏览 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt; &lt;img id="img" src="images/pica.jpg" height="40%"&gt; &lt;/span&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var imgName = new Array("pica.jpg","picb.jpg","picc.jpg","picd.jpg","pice.jpg","picf.jpg"); var foot = 0; //操作脚标 function setPic() &#123; var img = document.getElementById("img"); img.src = "images/" + imgName[foot ++]; console.log(img.src); if(foot &gt;= imgName.length) &#123; foot = 0; //从0开始 &#125; setTimeout(setPic,1000); //每秒更新一次 &#125; setPic();&lt;/script&gt;&lt;/html&gt; 总结：①所有的事件一定要绑定在它的触发元素上；②静态事件的绑定方式是，在元素上使用“OnXxx”的形式；③每一种事件都一定要捆绑一个函数进行事件的处理。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（四）事件处理]]></title>
    <url>%2F2018%2F01%2F18%2Fjavascript%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[javascript事件处理1 .什么是事件，事件驱动，事件处理程序？ 通常鼠标或热键的动作称之为事件； 由鼠标或热键引发的一连串程序的操作，称之为事件驱动； 对事件进行处理程序或函数，称之为事件处理程序。 在页面上任何的操作都可以被称为事件源，而对每一个事件就可以进行自定义的处理方式。如：页面加载，鼠标移动，键盘按下等，都可以称为事件源。 所有的事件在javascript中都是以“onXxx”形式命名。 2 . 下面这两个事件只能在&lt;body&gt;中进行处理： 注：把javascript代码放在&lt;head&gt;&lt;/head&gt;和放在&lt;body&gt;&lt;/body&gt;里是有区别的：放在&lt;head&gt;&lt;/head&gt;里的代码先执行，放在&lt;body&gt;&lt;/body&gt;里的代码后执行。head标签里的代码会在页面还未开始绘制之前被解析，而在body里的代码则会在界面渲染的同时在读取到这段代码的时候才被执行。 页面加载：onload 页面卸载事件：onunload 如下Demo：12345678910111213141516&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function loadHandle() &#123; alert("欢迎您的光临！"); &#125; function closeHandle() &#123; alert("感谢您的光临，下次再来哦！"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body onload="loadHandle();" onunload="closeHandle();"&gt; &lt;/body&gt;&lt;/html&gt; 常用的事件： 3 . 鼠标操作事件 onmousedown（鼠标按下触发） onmouseover（鼠标进入时触发） onmouseout（鼠标移开时触发） onmouseup（鼠标弹开时触发） onmousemove（鼠标移动时触发） 如下Demo1： 123456789101112131415&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function mouseHandle() &#123; alert("Hello Mm"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; //以下为按下时触发，其余的和这个一样 &lt;img src="52.jpeg" height="40%" onmousedown="mouseHandle()"&gt; &lt;/body&gt;&lt;/html&gt; Demo2在按钮上绑定事件（单击）： 1234567891011121314&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function clickHandle() &#123; alert("Hello Mm"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type="button" onclick="clickHandle()"&gt;按我哦&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 双击将onclick改成ondblclick就可以了。4 . javascript是一个基于对象的编程语言，所有的对象都在元素上，每一个元素（例如：&lt;tr&gt; &lt;td&gt;）都属于一个javascript对象如下Demo： 123456789101112131415161718192021222324252627282930&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function Changecolor(obj,color) &#123; obj.bgColor = color; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;table border="1" cellpadding="5" cellspacing="0" bgcolor="#F2F2F2"&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;部门编号&lt;/td&gt; &lt;td&gt;部门名称&lt;/td&gt; &lt;td&gt;部门位置&lt;/td&gt; &lt;/tr&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;财务部&lt;/td&gt; &lt;td&gt;上海&lt;/td&gt; &lt;/tr&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;技术部&lt;/td&gt; &lt;td&gt;北京&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（三）定义函数]]></title>
    <url>%2F2018%2F01%2F18%2Fjavascript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[javascript定义函数1 . javascript中定义函数的操作语法： 123function 函数名称（参数）&#123; return[返回值];&#125; 例子： 123456&lt;script type="text/javascript"&gt; function fun() &#123; alert("Hello World!"); &#125; fun();&lt;/script&gt; 注：函数的重复声明：如果多次采用function命令重复声明同一个函数，则后面的声明会覆盖前面的声明。 1234567891011&lt;script type="text/javascript"&gt; function act() &#123; document.write(1); &#125; act(); document.write("&lt;br&gt;"); function act() &#123; document.write(2); &#125; act();&lt;/script&gt; 2 .javascript模拟面向编程①Demo1: 12345678910&lt;script type="text/javascript"&gt; function Book() &#123; //定义一个Book类 &#125; //prototype属于对原生的操作扩展 Book.prototype.getInfo = function() &#123; return "这是一本书"; &#125; var book = new Book(); alert(book.getInfo());&lt;/script&gt; ②Demo2： 1234567891011&lt;script type="text/javascript"&gt; function Book(title,price) &#123; //定义一个Book类 this.title = title; this.price = price; &#125; Book.prototype.getInfo = function() &#123; return "title=" + this.title + ",price=" + this.price; &#125; var book = new Book("java",34.5); //构造函数 alert(book.getInfo());&lt;/script&gt; ③Demo3： 1234567891011121314&lt;script type="text/javascript"&gt; var myTitle; var myPrice; function Book(title,price) &#123; //定义一个类 myTitle = title; myPrice = price; function getInfo() &#123; return "title=" + myTitle + ",price=" + myPrice; &#125; return getInfo; //返回的是一个函数 &#125; var book = new Book("python",53); //构造函数 alert(book());&lt;/script&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（二）基本语法]]></title>
    <url>%2F2018%2F01%2F17%2Fjavascript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[javascript基本语法 1 . 输出 ① document.write(); 这条语句不可控制元素的顺序。 ② console.log(); 后台输出语句，方便调试2 . 变量①所有的变量只需要一个var关键字②未知状态不赋值的变量-&gt;undefined javascript变量的类型是不确定的： 观察如下小例子： 1234567891011y = 5+5;document.write(y); //结果为：55y = "6"+"6";document.write(y); //结果为：66y = "7"+7;document.write(y); //结果为：77y = 8+"8";document.write(y); //结果为：88 这里看两个demo① 12345678910111213&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = 10; console.log(typeof num); //注意一下这条语句，控制台输出number类型 &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; ② 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num; if(num) &#123; alert("这个变量有内容"); &#125; else &#123; alert("这个变量没有内容"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 运行后的结果如下图。因此，如果该变量属于undefined表示else后面的内容，否则属于true，if后面的内容。 类比下面的demo1）将if(num) 改成if(!num) —&gt;输出：“变量有内容”2) 下面的代码弹出的是—&gt;“变量有内容”，改成if(!num)就是“变量没有内容” 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = 1; if(num) &#123; alert("这个变量有内容"); &#125; else &#123; alert("这个变量没有内容"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 3 . javascript中没有char类型，不管是用单引号’ ‘还是双引号” “都是string类型var num = &#39;a&#39;; var num = &quot;a&quot; 4 . javascript中的截取 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = "ni hao shi jie"; var result = num.split(" "); console.log(typeof result); for(var x=0;x&lt;result.length;x++) &#123; console.log(result[x]); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 5 . 字符串的比较①java中有两种字符串的比较方法：equals()和==②javascript中只提供==这一种方式 12345&lt;script type="text/javascript"&gt; var numa="a"; var numb="a"; console.log(numa==numb); //true&lt;/script&gt; 6 .数组 javascript本身是一个对象的形式出现，所以数组的创建需要使用new关键字 可以这样写：1234var boys = new Array(); boys[0] = "tom" ; boys[1] = "joke" ; body[2] = "Alex" ; 也可以这样： 1var boys = new Array("tom","joke","Alex"); 或者： 1var boys = ["tom","joke","Alex"]; Demo:123456789&lt;script type="text/javascript"&gt; var result = new Array(); result[0] = "hello"; result[1] = 100; result[2] = false; for(var x=0;x&lt;result.length;x++) &#123; console.log(result[x] + "--&gt;" + typeof result[x]); &#125;&lt;/script&gt; javascript中的数组没有长度限制，它提供的就是动态数组。在javascript定义变量的时候可以不使用var，这样定义的变量，以javascript语法来讲就是全局变量，（几乎不使用）即有无var都可以正常使用。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript（一）基本介绍]]></title>
    <url>%2F2018%2F01%2F17%2Fjavascript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[面向对象和基于对象的区别？ 面向对象强调的是类的设计，对象的调用。 基于对象指的是所有的对象已经由浏览器提供好了，用户直接调用使用就可以了。 Java和JavaScript的区别？ java和javascript没有本质的关系。 java属于面向对象编程，javaScript是一种基于对象的编程语言。 javascript由网景公司开发，java最早由SUN开发。 关于javascript历史 javascript前身是LiveScript，后来网景将其更名为javascript，新的叫法EcmaScript。 EcmaScript是javascript语言的标准，如果把EcmaScript想象成接口，javascript相当于这个接 口的实现类。 注：java前期在浏览器端的发展，主要是Applet程序。 javascript可以做什么？ 可以模拟面向对象编程 可以进行服务器端编程（即Node.JS）。 小知识：Node.JS有两个方向①做网游服务器，②淘宝上一般使用Node.JS。 javascript入门及小Demo javascript是嵌入在HTML语言之中的，使用&lt; script &gt; 标记进行标注。可以实现一系列动态页面的操作效果。 以下为Demo.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Javascript&lt;/title&gt; &lt;script type="text/javascript"&gt; alert("Hello World！"); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; ① “text/javascript”代表是javascript语言编写的，也可以更换为VBScript。② 实际开发中javascript的代码是非常多的，很难维护，为了解决这样的问题，往往会单独建立一个*.js的文件，需要的时候导入即可，导入用的是src属性。 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Javascript&lt;/title&gt; &lt;script type="text/javascript" src="js/demo.js" /&gt; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 以下为js文件夹下的demo.js文件的代码 1alert("Hello World！");]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
