<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript（五）动态绑定事件]]></title>
    <url>%2F2018%2F01%2F19%2Fjavascript%EF%BC%88%E4%BA%94%EF%BC%89%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[javascript动态绑定事件1 . 首先看如下Demo： 123456789&lt;script type="text/javascript"&gt; function handle() &#123; //修改当前行元素 alert("事件绑定！"); &#125; //表示是在页面加载的时候进行加载事件的处理 window.onload = function() &#123; //匿名函数 handle(); &#125;&lt;/script&gt; 2 . 使用addEventListener（事件类型，处理函数名称，触发时机）进行动态设置。 注：对于整个javascript事件的处理分为两个部分： 1）事件的冒泡过程 2）事件的触发过程 触发时机都为false，表示在事件的触发过程进行处理，阻止事件的冒泡。 所有的动态设置的事件都可以在onload里面进行动态的配置，但是如果配置必须能够取得一个明确的元素对象可以使用“document.getElementById（元素ID）”的操作方式取得元素对象。Demo1：123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function handle() &#123; //修改当前行元素 alert("事件绑定！"); &#125; //表示是在页面加载的时候进行加载事件的处理 window.onload = function() &#123; //匿名函数 var imgElement = document.getElementById("myimg"); imgElement.addEventListener("click",handle,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- id是整个javascript的操作核心所在，必须存在 --&gt; &lt;img id="myimg" src="52.jpeg" height="20%" width="20%"&gt;&lt;/body&gt;&lt;/html&gt; 注：以后会通常使用这种代码，这种代码格式的好处：HTML和Javascript不会混合。Demo2： 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; window.onload = function() &#123; var butElement = document.getElementById("setBut"); //取得了setBut元素的对象 butElement.addEventListener("click",function() &#123; //在此元素内容增加指定的内容，而且内容可以是HTML代码 document.getElementById("info").innerHTML = "&lt;img src= '52.jpeg' height='40%' width='20%'&gt;"; &#125;,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt;&lt;/span&gt; &lt;button id="setBut"&gt;设置显示图片&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 3 .下面为一个小功能的扩充，实现一个图片浏览器。 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var imgName = new Array("pica.jpg","picb.jpg","picc.jpg","picd.jpg","pice.jpg","picf.jpg"); var foot = 1; window.onload = function() &#123; var pbut = document.getElementById("previousButton"); var nbut = document.getElementById("nextButton"); var img = document.getElementById("img"); nbut.addEventListener("click",function() &#123; if(foot &gt;= imgName.length) &#123; foot = 0; &#125; img.src = "images/" + imgName[foot++]; &#125;,false); pbut.addEventListener("click",function() &#123; if(foot &lt;= imgName.length) &#123; foot = imgName.length-1; &#125; img.src = "images/" + imgName[foot--]; &#125;,false); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt; &lt;img id="img" src="images/pica.jpg" height="50%"&gt; &lt;/span&gt; &lt;div id="controlDiv"&gt; &lt;button id="previousButton"&gt;上一张&lt;/button&gt; &lt;button id="nextButton"&gt;下一张&lt;/button&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 4 . 在javascript中提供一个setTimout（函数，时间-毫秒）利用此函数可以实现定期的操作调用。如下Demo1： 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt;hello&lt;/span&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; function setClick() &#123; var date = new Date(); //取当前时间 var info = document.getElementById("info"); info.innerHTML = "当前时间" + date ; setTimeout(setClick,1000); //每秒更新一次 &#125; setClick();&lt;/script&gt;&lt;/html&gt; Demo2：图片定时浏览 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;/head&gt;&lt;body&gt; &lt;span id="info"&gt; &lt;img id="img" src="images/pica.jpg" height="40%"&gt; &lt;/span&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var imgName = new Array("pica.jpg","picb.jpg","picc.jpg","picd.jpg","pice.jpg","picf.jpg"); var foot = 0; //操作脚标 function setPic() &#123; var img = document.getElementById("img"); img.src = "images/" + imgName[foot ++]; console.log(img.src); if(foot &gt;= imgName.length) &#123; foot = 0; //从0开始 &#125; setTimeout(setPic,1000); //每秒更新一次 &#125; setPic();&lt;/script&gt;&lt;/html&gt; 总结：①所有的事件一定要绑定在它的触发元素上；②静态事件的绑定方式是，在元素上使用“OnXxx”的形式；③每一种事件都一定要捆绑一个函数进行事件的处理。]]></content>
  </entry>
  <entry>
    <title><![CDATA[javascript（四）事件处理]]></title>
    <url>%2F2018%2F01%2F18%2Fjavascript%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[javascript事件处理1 . 什么是事件处理？ 在页面上任何的操作都可以被称为事件源，而对每一个事件就可以进行自定义的处理方式。如：页面加载，鼠标移动，键盘按下等，都可以称为事件源。 所有的事件在javascript中都是以“onXxx”形式命名。 2 . 下面这两个事件只能在&lt;body&gt;中进行处理： 页面加载：onload 页面卸载事件：onunload 如下Demo：12345678910111213141516&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function loadHandle() &#123; alert("欢迎您的光临！"); &#125; function closeHandle() &#123; alert("感谢您的光临，下次再来哦！"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body onload="loadHandle();" onunload="closeHandle();"&gt; &lt;/body&gt;&lt;/html&gt; 3 . 鼠标操作事件 onmousedown（鼠标按下触发） onmouseover（鼠标进入时触发） onmouseout（鼠标移开时触发） onmouseup（鼠标弹开时触发） onmousemove（鼠标移动时触发） 如下Demo1： 123456789101112131415&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function mouseHandle() &#123; alert("Hello Mm"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; //以下为按下时触发，其余的和这个一样 &lt;img src="52.jpeg" height="40%" onmousedown="mouseHandle()"&gt; &lt;/body&gt;&lt;/html&gt; Demo2在按钮上绑定事件（单击）： 1234567891011121314&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function clickHandle() &#123; alert("Hello Mm"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button type="button" onclick="clickHandle()"&gt;按我哦&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 双击将onclick改成ondblclick就可以了。4 . javascript是一个基于对象的编程语言，所有的对象都在元素上，每一个元素（例如：&lt;tr&gt; &lt;td&gt;）都属于一个javascript对象如下Demo： 123456789101112131415161718192021222324252627282930&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; function Changecolor(obj,color) &#123; obj.bgColor = color; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;table border="1" cellpadding="5" cellspacing="0" bgcolor="#F2F2F2"&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;部门编号&lt;/td&gt; &lt;td&gt;部门名称&lt;/td&gt; &lt;td&gt;部门位置&lt;/td&gt; &lt;/tr&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;财务部&lt;/td&gt; &lt;td&gt;上海&lt;/td&gt; &lt;/tr&gt; &lt;tr onmouseover="Changecolor(this,'white')" onmouseout="Changecolor(this,'#F2F2F2')"&gt; &lt;td&gt;20&lt;/td&gt; &lt;td&gt;技术部&lt;/td&gt; &lt;td&gt;北京&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[javascript（三）定义函数]]></title>
    <url>%2F2018%2F01%2F18%2Fjavascript%EF%BC%88%E4%B8%89%EF%BC%89%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[javascript定义函数1 . javascript中定义函数的操作语法： 123function 函数名称（参数）&#123; return[返回值];&#125; 例子： 123456&lt;script type="text/javascript"&gt; function fun() &#123; alert("Hello World!"); &#125; fun();&lt;/script&gt; 2 .javascript模拟面向编程①Demo1: 12345678910&lt;script type="text/javascript"&gt; function Book() &#123; //定义一个Book类 &#125; //prototype属于对原生的操作扩展 Book.prototype.getInfo = function() &#123; return "这是一本书"; &#125; var book = new Book(); alert(book.getInfo());&lt;/script&gt; ②Demo2： 1234567891011&lt;script type="text/javascript"&gt; function Book(title,price) &#123; //定义一个Book类 this.title = title; this.price = price; &#125; Book.prototype.getInfo = function() &#123; return "title=" + this.title + ",price=" + this.price; &#125; var book = new Book("java",34.5); //构造函数 alert(book.getInfo());&lt;/script&gt; ③Demo3： 1234567891011121314&lt;script type="text/javascript"&gt; var myTitle; var myPrice; function Book(title,price) &#123; //定义一个类 myTitle = title; myPrice = price; function getInfo() &#123; return "title=" + myTitle + ",price=" + myPrice; &#125; return getInfo; //返回的是一个函数 &#125; var book = new Book("python",53); //构造函数 alert(book());&lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[javascript（二）基本语法]]></title>
    <url>%2F2018%2F01%2F17%2Fjavascript%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[javascript基本语法 1 . 输出 ① document.write(); 这条语句不可控制元素的顺序。 ② console.log(); 后台输出语句，方便调试2 . 变量①所有的变量只需要一个var关键字②未知状态不赋值的变量-&gt;undefined 这里看两个demo① 12345678910111213&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = 10; console.log(typeof num); //注意一下这条语句，控制台输出number类型 &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; ② 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num; if(num) &#123; alert("这个变量有内容"); &#125; else &#123; alert("这个变量没有内容"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 运行后的结果如下图。因此，如果该变量属于undefined表示else后面的内容，否则属于true，if后面的内容。 类比下面的demo1）将if(num) 改成if(!num) —&gt;输出：“变量有内容”2) 下面的代码弹出的是—&gt;“变量有内容”，改成if(!num)就是“变量没有内容” 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = 1; if(num) &#123; alert("这个变量有内容"); &#125; else &#123; alert("这个变量没有内容"); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 3 . javascript中没有char类型，不管是用单引号’ ‘还是双引号” “都是string类型var num = &#39;a&#39;; var num = &quot;a&quot; 4 . javascript中的截取 1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript&lt;/title&gt; &lt;meta charset="utf-8"&gt; &lt;script type="text/javascript"&gt; var num = "ni hao shi jie"; var result = num.split(" "); console.log(typeof result); for(var x=0;x&lt;result.length;x++) &#123; console.log(result[x]); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;你好菲菲！&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 5 . 字符串的比较①java中有两种字符串的比较方法：equals()和==②javascript中只提供==这一种方式 12345&lt;script type="text/javascript"&gt; var numa="a"; var numb="a"; console.log(numa==numb); //true&lt;/script&gt; 6 .数组 javascript本身是一个对象的形式出现，所以数组的创建需要使用new关键字 123456789&lt;script type="text/javascript"&gt; var result = new Array(); result[0] = "hello"; result[1] = 100; result[2] = false; for(var x=0;x&lt;result.length;x++) &#123; console.log(result[x] + "--&gt;" + typeof result[x]); &#125;&lt;/script&gt; javascript中的数组没有长度限制，它提供的就是动态数组。在javascript定义变量的时候可以不使用var，这样定义的变量，以javascript语法来讲就是全局变量，（几乎不使用）即有无var都可以正常使用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[javascript（一）基本介绍]]></title>
    <url>%2F2018%2F01%2F17%2Fjavascript%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[面向对象和基于对象的区别？ 面向对象强调的是类的设计，对象的调用。 基于对象指的是所有的对象已经由浏览器提供好了，用户直接调用使用就可以了。 Java和JavaScript的区别？ java和javascript没有本质的关系。 java属于面向对象编程，javaScript是一种基于对象的编程语言。 javascript由网景公司开发，java最早由SUN开发。 关于javascript历史 javascript前身是LiveScript，后来网景将其更名为javascript，新的叫法EcmaScript。 EcmaScript是javascript语言的标准，如果把EcmaScript想象成接口，javascript相当于这个接 口的实现类。 注：java前期在浏览器端的发展，主要是Applet程序。 javascript可以做什么？ 可以模拟面向对象编程 可以进行服务器端编程（即Node.JS）。 小知识：Node.JS有两个方向①做网游服务器，②淘宝上一般使用Node.JS。 javascript入门及小Demo javascript是嵌入在HTML语言之中的，使用&lt; script &gt; 标记进行标注。可以实现一系列动态页面的操作效果。 以下为Demo.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Javascript&lt;/title&gt; &lt;script type="text/javascript"&gt; alert("Hello World！"); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; ① “text/javascript”代表是javascript语言编写的，也可以更换为VBScript。② 实际开发中javascript的代码是非常多的，很难维护，为了解决这样的问题，往往会单独建立一个*.js的文件，需要的时候导入即可，导入用的是src属性。 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Javascript&lt;/title&gt; &lt;script type="text/javascript" src="js/demo.js" /&gt; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 以下为js文件夹下的demo.js文件的代码 1alert("Hello World！");]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
